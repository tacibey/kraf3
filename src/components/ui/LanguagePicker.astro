---
import { languages } from "@utils//ui";
import Icon from "./icons/Icon.astro";
---

<div class="hs-dropdown relative inline-flex">
  <button
    id="hs-dropdown-default"
    type="button"
    aria-label="Change language"
    class="hs-dropdown-toggle inline-flex items-center gap-x-2 rounded-lg px-1.5 py-1.5 text-sm font-medium text-neutral-600 outline-hidden ring-zinc-500 transition duration-300 hover:bg-neutral-200 hover:text-orange-400 dark:border-neutral-700 dark:text-neutral-400 dark:ring-zinc-200 dark:hover:bg-neutral-700 dark:hover:text-orange-300 dark:focus:outline-hidden"
  >
    <Icon name="earth" />
    <svg
      class="size-4 hs-dropdown-open:rotate-180"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"><path d="m6 9 6 6 6-6"></path></svg
    >
  </button>

  <div
    class="hs-dropdown-menu duration left-[20%]! top-[98%]! mt-2 hidden transform-none! rounded-lg bg-neutral-50 p-2 opacity-0 shadow-md transition-[opacity,margin] before:absolute before:-top-4 before:start-0 before:h-4 before:w-full after:absolute after:-bottom-4 after:start-0 after:h-4 after:w-full hs-dropdown-open:opacity-100 dark:divide-neutral-700 dark:border dark:border-neutral-700 dark:bg-neutral-800 md:left-[90%]! md:top-[80%]!"
    aria-labelledby="hs-dropdown-hover-event"
  >
    {
      // Map through the list of languages, creating a link for each language
      Object.entries(languages).map(([lang, label]) => (
        <a
          class="flex items-center gap-x-3.5 rounded-lg px-3 py-2 text-sm text-neutral-800 hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-hidden dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:bg-neutral-700"
          href={`/${lang === "en" ? "" : lang}`}
        >
          {label}
        </a>
      ))
    }
  </div>
</div>

<script>
  // Type alias for supported languages (Keep this or import from ui.ts if defined there)
  type TLanguage = "en" | "fr" | "es" | "ru"; // Include all supported languages

  // Array of supported languages (Ensure this matches languages in ui.ts)
  const languages: TLanguage[] = ["en", "fr", "es", "ru"];

  document.addEventListener("DOMContentLoaded", function () {
    // Only target language picker links inside the dropdown
    const languageLinks = document.querySelectorAll(
      ".hs-dropdown-menu[aria-labelledby='hs-dropdown-default'] a" // More specific selector
    );

    languageLinks.forEach((element) => {
      const link = element as HTMLAnchorElement;

      // Get the target language code from the link's href
      const hrefLangMatch = link.getAttribute("href")?.match(/^\/([a-z]{2})\/?/);
      const targetLang: TLanguage | string = hrefLangMatch ? hrefLangMatch[1] : "en"; // Default to 'en' if no prefix

      link.addEventListener("click", function (event) {
        event.preventDefault(); // Prevent default link navigation

        const currentUrl = new URL(window.location.href);
        const pathParts = currentUrl.pathname.split("/").filter(part => part !== ""); // Get path parts, remove empty ones

        let currentLang: TLanguage | null = null;
        let pathWithoutLang = "";

        // Check if the first part is a known language code
        if (pathParts.length > 0 && languages.includes(pathParts[0] as TLanguage)) {
          currentLang = pathParts[0] as TLanguage;
          pathWithoutLang = "/" + pathParts.slice(1).join("/"); // Get the rest of the path
        } else {
          // If no language code found, assume default (English)
          currentLang = "en";
          pathWithoutLang = currentUrl.pathname; // Use the full path
        }

        // Ensure pathWithoutLang always starts with a slash (unless it's just root "/")
        if (pathWithoutLang !== "/" && !pathWithoutLang.startsWith("/")) {
            pathWithoutLang = "/" + pathWithoutLang;
        }
         // Handle root path explicitly
        if (pathWithoutLang === "//") {
             pathWithoutLang = "/";
        }


        let newPath = "";
        // Construct the new path with the target language prefix (unless it's the default 'en')
        if (targetLang && targetLang !== "en") {
          newPath = `/${targetLang}${pathWithoutLang}`;
        } else {
          // If target is 'en', just use the path without any prefix
          newPath = pathWithoutLang;
        }

        // Normalize multiple slashes (e.g., // becomes /)
        newPath = newPath.replace(/\/+/g, "/");
        // Ensure root path is handled correctly
        if (newPath === "") newPath = "/";


        // Construct the new full URL and navigate
        const newUrl = `${currentUrl.origin}${newPath}${currentUrl.search}${currentUrl.hash}`;

        // Only navigate if the URL has actually changed
        if (newUrl !== window.location.href) {
           window.location.href = newUrl;
        }

      });
    });
  });
</script>
